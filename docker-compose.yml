version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pms-postgres
    environment:
      POSTGRES_DB: pms_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pms-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pms-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/pms_db
      - JWT_SECRET=pms-super-secret-jwt-key-2024
      - PORT=5000
      - CORS_ORIGIN=http://localhost:3000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
    networks:
      - pms-network
    restart: unless-stopped
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pms-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - pms-network
    restart: unless-stopped
    command: npm start

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: pms-redis
    ports:
      - "6379:6379"
    networks:
      - pms-network
    restart: unless-stopped

networks:
  pms-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
